---
// src/components/HoverTextAnimator.astro
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'a'> {
  initialText: string;
  texts: string[];
  href?: string; // Optional href, defaults to "/"
  typingSpeed?: number; // ms per character
  erasingSpeed?: number; // ms per character
  TextDuration?: number; // ms after typing/erasing, before next action
  NothingDuration?: number;
  cursorChar?: string;
  cursorBlinkSpeed?: number; // ms for cursor blink interval
  // class:list is handled by Astro automatically via {...Astro.props}
}

const {
  initialText,
  texts = [],
  href = "/",
  typingSpeed = 100,
  erasingSpeed = 50,
  TextDuration = 1000,
  NothingDuration = 200,
  cursorChar = '_',
  cursorBlinkSpeed = 500,
  ...rest // Captures class, id, etc.
} = Astro.props;

// Generate a unique ID for this component instance to scope JS effects
const componentId = `hover-text-animator-${Math.random().toString(36).substring(2, 9)}`;
---

<a href={href} id={componentId} {...rest}>
  <span class="text-content">{initialText}</span>
  <span class="animated-cursor" style={{ display: 'none' }}>{cursorChar}</span>
</a>

<style define:vars={{ cursorBlinkSpeed: `${cursorBlinkSpeed}ms` }}>
  .animated-cursor {
    display: inline-block; /* Allows it to sit next to text */
    animation: blink var(--cursorBlinkSpeed) infinite;
    /* Optional: to make cursor same height as text */
    /* line-height: inherit;
    vertical-align: baseline; */
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  /* Ensure text doesn't wrap during animation if it gets long */
  /* Apply this to the anchor if needed, or use a class passed via class:list */
  /*
  #{componentId} {
    white-space: nowrap;
  }
  */
</style>

<script define:vars={{
  componentId,
  initialText,
  texts,
  typingSpeed,
  erasingSpeed,
  TextDuration,
  NothingDuration,
}}>
  const anchorElement = document.getElementById(componentId);
  if (anchorElement) {
    const textElement = anchorElement.querySelector('.text-content');
    const cursorElement = anchorElement.querySelector('.animated-cursor');

    let currentIndex = 0;
    let isHovering = false;
    let isAnimating = false; // Prevents multiple animation cycles from starting
    let animationTimeoutId = null; // For the main animation loop
    let actionTimeoutId = null; // For typing/erasing steps

    const clearCurrentTimeouts = () => {
      if (animationTimeoutId) clearTimeout(animationTimeoutId);
      if (actionTimeoutId) clearTimeout(actionTimeoutId);
      animationTimeoutId = null;
      actionTimeoutId = null;
    };

    const typeText = (textToType) => {
      return new Promise((resolve) => {
        let i = 0;
        textElement.textContent = ''; // Clear before typing
        function typeChar() {
          if (!isHovering) { // Stop if mouse leaves during typing
            resolve(false); // Indicate stopped
            return;
          }
          if (i < textToType.length) {
            textElement.textContent += textToType.charAt(i);
            i++;
            actionTimeoutId = setTimeout(typeChar, typingSpeed);
          } else {
            resolve(true); // Indicate completed
          }
        }
        typeChar();
      });
    };

    const eraseText = () => {
      return new Promise((resolve) => {
        let currentText = textElement.textContent;
        function eraseChar() {
          if (!isHovering) { // Stop if mouse leaves during erasing
            resolve(false);
            return;
          }
          if (currentText.length > 0) {
            currentText = currentText.substring(0, currentText.length - 1);
            textElement.textContent = currentText;
            actionTimeoutId = setTimeout(eraseChar, erasingSpeed);
          } else {
            resolve(true);
          }
        }
        eraseChar();
      });
    };

    const animate = async () => {
      if (!isHovering || texts.length === 0) {
        isAnimating = false;
        return;
      }
      isAnimating = true;

      // 1. Erase current text (could be initial or previous from list)
      const erased = await eraseText();
      if (!erased) { // If erasing was interrupted by mouseleave
        resetToInitial();
        return;
      }

      // 2. Delay
      await new Promise(resolve => {
        if (!isHovering) { resolve(); return; }
        actionTimeoutId = setTimeout(resolve, NothingDuration);
      });
      if (!isHovering) { resetToInitial(); return; }


      // 3. Type next text
      const textToDisplay = texts[currentIndex];
      const typed = await typeText(textToDisplay);
       if (!typed) { // If typing was interrupted by mouseleave
        resetToInitial();
        return;
      }

      // 4. Delay
      await new Promise(resolve => {
        if (!isHovering) { resolve(); return; }
        actionTimeoutId = setTimeout(resolve, TextDuration);
      });
      if (!isHovering) { resetToInitial(); return; }


      // 5. Prepare for next cycle
      currentIndex = (currentIndex + 1) % texts.length;
      animationTimeoutId = setTimeout(animate, 0); // Loop immediately for next erase
    };

    const resetToInitial = () => {
      clearCurrentTimeouts();
      textElement.textContent = initialText;
      if (cursorElement) cursorElement.style.display = 'none';
      isAnimating = false;
      currentIndex = 0; // Reset index for next hover
    };

    anchorElement.addEventListener('mouseenter', () => {
      if (isHovering) return; // Already hovering
      isHovering = true;
      if (cursorElement) cursorElement.style.display = 'inline-block';

      if (!isAnimating && texts.length > 0) {
        clearCurrentTimeouts(); // Clear any pending from a quick mouseout/in
        animate();
      } else if (texts.length === 0) {
        // No texts to animate, just show cursor
      }
    });

    anchorElement.addEventListener('mouseleave', () => {
      isHovering = false;
      // The ongoing promises (typeText/eraseText) will check `isHovering`
      // and resolve early. If they do, `resetToInitial` is called from there.
      // If we are in a `TextDuration` timeout, we need to clear it and reset.
      if (!isAnimating || (actionTimeoutId && !textElement.textContent && textElement.textContent !== initialText) ) {
        // If not actively typing/erasing (e.g., in a delay, or animation finished but mouse still over)
        // or if erasing just finished and it's about to type the initial text (which we don't want)
        resetToInitial();
      }
      // If an animation (typing/erasing) is ongoing, it will self-terminate and call resetToInitial.
    });

  } else {
    console.warn(`HoverTextAnimator: Could not find element with ID ${componentId}`);
  }
</script>